// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/messages/messages.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExecRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecRequest) Reset()         { *m = ExecRequest{} }
func (m *ExecRequest) String() string { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()    {}
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{0}
}

func (m *ExecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecRequest.Unmarshal(m, b)
}
func (m *ExecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecRequest.Marshal(b, m, deterministic)
}
func (m *ExecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecRequest.Merge(m, src)
}
func (m *ExecRequest) XXX_Size() int {
	return xxx_messageInfo_ExecRequest.Size(m)
}
func (m *ExecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecRequest proto.InternalMessageInfo

func (m *ExecRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type ExecReply struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecReply) Reset()         { *m = ExecReply{} }
func (m *ExecReply) String() string { return proto.CompactTextString(m) }
func (*ExecReply) ProtoMessage()    {}
func (*ExecReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{1}
}

func (m *ExecReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecReply.Unmarshal(m, b)
}
func (m *ExecReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecReply.Marshal(b, m, deterministic)
}
func (m *ExecReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecReply.Merge(m, src)
}
func (m *ExecReply) XXX_Size() int {
	return xxx_messageInfo_ExecReply.Size(m)
}
func (m *ExecReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExecReply proto.InternalMessageInfo

func (m *ExecReply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecRequest)(nil), "messages.ExecRequest")
	proto.RegisterType((*ExecReply)(nil), "messages.ExecReply")
}

func init() { proto.RegisterFile("common/messages/messages.proto", fileDescriptor_8a23ab92aaff7b7b) }

var fileDescriptor_8a23ab92aaff7b7b = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x2d, 0x86, 0x33, 0xf4, 0x0a, 0x8a,
	0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60, 0x7c, 0x25, 0x79, 0x2e, 0x6e, 0xd7, 0x8a, 0xd4, 0xe4, 0xa0,
	0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xe4, 0xdc, 0x14, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x49, 0x91, 0x8b, 0x13, 0xa2, 0xa0, 0x20, 0xa7, 0x52, 0x48,
	0x84, 0x8b, 0xb5, 0x08, 0xc4, 0x80, 0x2a, 0x80, 0x70, 0x8c, 0xec, 0xb9, 0xd8, 0x3d, 0x73, 0x0b,
	0x72, 0x12, 0xf3, 0x4a, 0x84, 0x4c, 0xb8, 0x58, 0x40, 0xaa, 0x85, 0x44, 0xf5, 0xe0, 0x36, 0x22,
	0x19, 0x2f, 0x25, 0x8c, 0x2e, 0x5c, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x95, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x69, 0x95, 0x6a, 0xb7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImplantClient is the client API for Implant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImplantClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecReply, error)
}

type implantClient struct {
	cc *grpc.ClientConn
}

func NewImplantClient(cc *grpc.ClientConn) ImplantClient {
	return &implantClient{cc}
}

func (c *implantClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecReply, error) {
	out := new(ExecReply)
	err := c.cc.Invoke(ctx, "/messages.Implant/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImplantServer is the server API for Implant service.
type ImplantServer interface {
	Exec(context.Context, *ExecRequest) (*ExecReply, error)
}

// UnimplementedImplantServer can be embedded to have forward compatible implementations.
type UnimplementedImplantServer struct {
}

func (*UnimplementedImplantServer) Exec(ctx context.Context, req *ExecRequest) (*ExecReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

func RegisterImplantServer(s *grpc.Server, srv ImplantServer) {
	s.RegisterService(&_Implant_serviceDesc, srv)
}

func _Implant_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplantServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Implant/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplantServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Implant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Implant",
	HandlerType: (*ImplantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Implant_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/messages/messages.proto",
}
