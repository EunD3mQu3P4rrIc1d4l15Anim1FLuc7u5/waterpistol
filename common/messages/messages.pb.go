// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/messages/messages.proto

package messages

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImplantReply struct {
	Module               string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImplantReply) Reset()         { *m = ImplantReply{} }
func (m *ImplantReply) String() string { return proto.CompactTextString(m) }
func (*ImplantReply) ProtoMessage()    {}
func (*ImplantReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{0}
}

func (m *ImplantReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImplantReply.Unmarshal(m, b)
}
func (m *ImplantReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImplantReply.Marshal(b, m, deterministic)
}
func (m *ImplantReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImplantReply.Merge(m, src)
}
func (m *ImplantReply) XXX_Size() int {
	return xxx_messageInfo_ImplantReply.Size(m)
}
func (m *ImplantReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ImplantReply.DiscardUnknown(m)
}

var xxx_messageInfo_ImplantReply proto.InternalMessageInfo

func (m *ImplantReply) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ImplantReply) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ExecReply struct {
	Reply                string   `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecReply) Reset()         { *m = ExecReply{} }
func (m *ExecReply) String() string { return proto.CompactTextString(m) }
func (*ExecReply) ProtoMessage()    {}
func (*ExecReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{1}
}

func (m *ExecReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecReply.Unmarshal(m, b)
}
func (m *ExecReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecReply.Marshal(b, m, deterministic)
}
func (m *ExecReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecReply.Merge(m, src)
}
func (m *ExecReply) XXX_Size() int {
	return xxx_messageInfo_ExecReply.Size(m)
}
func (m *ExecReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExecReply proto.InternalMessageInfo

func (m *ExecReply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

type FileReply struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileReply) Reset()         { *m = FileReply{} }
func (m *FileReply) String() string { return proto.CompactTextString(m) }
func (*FileReply) ProtoMessage()    {}
func (*FileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{2}
}

func (m *FileReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileReply.Unmarshal(m, b)
}
func (m *FileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileReply.Marshal(b, m, deterministic)
}
func (m *FileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileReply.Merge(m, src)
}
func (m *FileReply) XXX_Size() int {
	return xxx_messageInfo_FileReply.Size(m)
}
func (m *FileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FileReply.DiscardUnknown(m)
}

var xxx_messageInfo_FileReply proto.InternalMessageInfo

func (m *FileReply) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

// Implant -> C2
type CheckCmdRequest struct {
	// Types that are valid to be assigned to Message:
	//	*CheckCmdRequest_Heartbeat
	//	*CheckCmdRequest_Reply
	Message              isCheckCmdRequest_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CheckCmdRequest) Reset()         { *m = CheckCmdRequest{} }
func (m *CheckCmdRequest) String() string { return proto.CompactTextString(m) }
func (*CheckCmdRequest) ProtoMessage()    {}
func (*CheckCmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{3}
}

func (m *CheckCmdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCmdRequest.Unmarshal(m, b)
}
func (m *CheckCmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCmdRequest.Marshal(b, m, deterministic)
}
func (m *CheckCmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCmdRequest.Merge(m, src)
}
func (m *CheckCmdRequest) XXX_Size() int {
	return xxx_messageInfo_CheckCmdRequest.Size(m)
}
func (m *CheckCmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCmdRequest proto.InternalMessageInfo

type isCheckCmdRequest_Message interface {
	isCheckCmdRequest_Message()
}

type CheckCmdRequest_Heartbeat struct {
	Heartbeat int64 `protobuf:"varint,1,opt,name=heartbeat,proto3,oneof"`
}

type CheckCmdRequest_Reply struct {
	Reply *ImplantReply `protobuf:"bytes,2,opt,name=reply,proto3,oneof"`
}

func (*CheckCmdRequest_Heartbeat) isCheckCmdRequest_Message() {}

func (*CheckCmdRequest_Reply) isCheckCmdRequest_Message() {}

func (m *CheckCmdRequest) GetMessage() isCheckCmdRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *CheckCmdRequest) GetHeartbeat() int64 {
	if x, ok := m.GetMessage().(*CheckCmdRequest_Heartbeat); ok {
		return x.Heartbeat
	}
	return 0
}

func (m *CheckCmdRequest) GetReply() *ImplantReply {
	if x, ok := m.GetMessage().(*CheckCmdRequest_Reply); ok {
		return x.Reply
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CheckCmdRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CheckCmdRequest_Heartbeat)(nil),
		(*CheckCmdRequest_Reply)(nil),
	}
}

// C2 -> Implant
type CheckCmdReply struct {
	// Types that are valid to be assigned to Message:
	//	*CheckCmdReply_Heartbeat
	//	*CheckCmdReply_Exec
	//	*CheckCmdReply_File
	Message              isCheckCmdReply_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CheckCmdReply) Reset()         { *m = CheckCmdReply{} }
func (m *CheckCmdReply) String() string { return proto.CompactTextString(m) }
func (*CheckCmdReply) ProtoMessage()    {}
func (*CheckCmdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a23ab92aaff7b7b, []int{4}
}

func (m *CheckCmdReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCmdReply.Unmarshal(m, b)
}
func (m *CheckCmdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCmdReply.Marshal(b, m, deterministic)
}
func (m *CheckCmdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCmdReply.Merge(m, src)
}
func (m *CheckCmdReply) XXX_Size() int {
	return xxx_messageInfo_CheckCmdReply.Size(m)
}
func (m *CheckCmdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCmdReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCmdReply proto.InternalMessageInfo

type isCheckCmdReply_Message interface {
	isCheckCmdReply_Message()
}

type CheckCmdReply_Heartbeat struct {
	Heartbeat int64 `protobuf:"varint,1,opt,name=heartbeat,proto3,oneof"`
}

type CheckCmdReply_Exec struct {
	Exec *ExecReply `protobuf:"bytes,2,opt,name=exec,proto3,oneof"`
}

type CheckCmdReply_File struct {
	File *FileReply `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

func (*CheckCmdReply_Heartbeat) isCheckCmdReply_Message() {}

func (*CheckCmdReply_Exec) isCheckCmdReply_Message() {}

func (*CheckCmdReply_File) isCheckCmdReply_Message() {}

func (m *CheckCmdReply) GetMessage() isCheckCmdReply_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *CheckCmdReply) GetHeartbeat() int64 {
	if x, ok := m.GetMessage().(*CheckCmdReply_Heartbeat); ok {
		return x.Heartbeat
	}
	return 0
}

func (m *CheckCmdReply) GetExec() *ExecReply {
	if x, ok := m.GetMessage().(*CheckCmdReply_Exec); ok {
		return x.Exec
	}
	return nil
}

func (m *CheckCmdReply) GetFile() *FileReply {
	if x, ok := m.GetMessage().(*CheckCmdReply_File); ok {
		return x.File
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CheckCmdReply) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CheckCmdReply_Heartbeat)(nil),
		(*CheckCmdReply_Exec)(nil),
		(*CheckCmdReply_File)(nil),
	}
}

func init() {
	proto.RegisterType((*ImplantReply)(nil), "messages.ImplantReply")
	proto.RegisterType((*ExecReply)(nil), "messages.ExecReply")
	proto.RegisterType((*FileReply)(nil), "messages.FileReply")
	proto.RegisterType((*CheckCmdRequest)(nil), "messages.CheckCmdRequest")
	proto.RegisterType((*CheckCmdReply)(nil), "messages.CheckCmdReply")
}

func init() { proto.RegisterFile("common/messages/messages.proto", fileDescriptor_8a23ab92aaff7b7b) }

var fileDescriptor_8a23ab92aaff7b7b = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcd, 0x4e, 0x83, 0x40,
	0x14, 0x85, 0xa1, 0x60, 0xeb, 0x5c, 0x35, 0xc6, 0xd1, 0xd4, 0xea, 0xa2, 0x22, 0x2b, 0xdc, 0x60,
	0x52, 0x77, 0x2e, 0x6d, 0x34, 0x74, 0xe1, 0xc2, 0x89, 0x2f, 0x30, 0x85, 0x6b, 0xdb, 0x38, 0xc3,
	0x20, 0x3f, 0xb1, 0xbe, 0x85, 0x8f, 0x6c, 0x66, 0xa0, 0xd0, 0x34, 0x26, 0xdd, 0x9d, 0x0b, 0xdf,
	0xcc, 0x39, 0xe7, 0x0e, 0x8c, 0x63, 0x25, 0xa5, 0x4a, 0xef, 0x25, 0x16, 0x05, 0x5f, 0x60, 0xd1,
	0x8a, 0x30, 0xcb, 0x55, 0xa9, 0xe8, 0xe1, 0x66, 0xf6, 0x1f, 0xe1, 0x78, 0x26, 0x33, 0xc1, 0xd3,
	0x92, 0x61, 0x26, 0x7e, 0xe8, 0x10, 0xfa, 0x52, 0x25, 0x95, 0xc0, 0x91, 0xed, 0xd9, 0x01, 0x61,
	0xcd, 0x44, 0x29, 0xb8, 0x3c, 0x5f, 0x14, 0xa3, 0x9e, 0xe7, 0x04, 0x84, 0x19, 0xed, 0xdf, 0x02,
	0x79, 0x5e, 0x63, 0x5c, 0x1f, 0xbc, 0x80, 0x83, 0x5c, 0x8b, 0xe6, 0x5c, 0x3d, 0xf8, 0x37, 0x40,
	0x5e, 0x56, 0x02, 0x6b, 0x84, 0x82, 0xfb, 0xb1, 0x6a, 0x6f, 0x36, 0xda, 0x17, 0x70, 0x3a, 0x5d,
	0x62, 0xfc, 0x39, 0x95, 0x09, 0xc3, 0xaf, 0x0a, 0x8b, 0x92, 0x8e, 0x81, 0x2c, 0x91, 0xe7, 0xe5,
	0x1c, 0x79, 0x69, 0x58, 0x27, 0xb2, 0x58, 0xf7, 0x89, 0x86, 0x1b, 0xa7, 0x9e, 0x67, 0x07, 0x47,
	0x93, 0x61, 0xd8, 0x96, 0xdb, 0x6e, 0x12, 0x59, 0x4d, 0x86, 0x27, 0x02, 0x83, 0x86, 0xf0, 0x7f,
	0x6d, 0x38, 0xe9, 0xec, 0x74, 0xa6, 0x7d, 0x66, 0x77, 0xe0, 0xe2, 0x1a, 0xe3, 0xc6, 0xeb, 0xbc,
	0xf3, 0x6a, 0x9b, 0x47, 0x16, 0x33, 0x88, 0x46, 0x4d, 0x3d, 0x67, 0x17, 0x6d, 0x37, 0xa0, 0x51,
	0x8d, 0x6c, 0x45, 0x9a, 0xbc, 0xc3, 0xe0, 0x95, 0x8b, 0x6f, 0x9e, 0x23, 0x9d, 0xc1, 0x59, 0x1d,
	0x4e, 0x49, 0xc9, 0xd3, 0xe4, 0xad, 0xc2, 0x0a, 0xe9, 0x55, 0x77, 0xcf, 0xce, 0xa2, 0xae, 0x2f,
	0xff, 0xfb, 0xa5, 0xb7, 0x6e, 0xcd, 0xfb, 0xe6, 0x9d, 0x1f, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xea, 0x0e, 0x9a, 0x95, 0x09, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MalwareClient is the client API for Malware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MalwareClient interface {
	CheckCommandQueue(ctx context.Context, in *CheckCmdRequest, opts ...grpc.CallOption) (*CheckCmdReply, error)
}

type malwareClient struct {
	cc *grpc.ClientConn
}

func NewMalwareClient(cc *grpc.ClientConn) MalwareClient {
	return &malwareClient{cc}
}

func (c *malwareClient) CheckCommandQueue(ctx context.Context, in *CheckCmdRequest, opts ...grpc.CallOption) (*CheckCmdReply, error) {
	out := new(CheckCmdReply)
	err := c.cc.Invoke(ctx, "/messages.Malware/CheckCommandQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MalwareServer is the server API for Malware service.
type MalwareServer interface {
	CheckCommandQueue(context.Context, *CheckCmdRequest) (*CheckCmdReply, error)
}

// UnimplementedMalwareServer can be embedded to have forward compatible implementations.
type UnimplementedMalwareServer struct {
}

func (*UnimplementedMalwareServer) CheckCommandQueue(ctx context.Context, req *CheckCmdRequest) (*CheckCmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCommandQueue not implemented")
}

func RegisterMalwareServer(s *grpc.Server, srv MalwareServer) {
	s.RegisterService(&_Malware_serviceDesc, srv)
}

func _Malware_CheckCommandQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalwareServer).CheckCommandQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.Malware/CheckCommandQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalwareServer).CheckCommandQueue(ctx, req.(*CheckCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Malware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.Malware",
	HandlerType: (*MalwareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckCommandQueue",
			Handler:    _Malware_CheckCommandQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/messages/messages.proto",
}
